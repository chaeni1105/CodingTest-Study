### [문제 분석]
# 목적 :이 문제의 목적은 문자열을 올바르게 입력받고 파일의 끝(EOF)을 올바르게 판단하는 법을 연습하는 것입니다. 
# -> 입력받은 그대로를 출력시킨다

### [문제 풀이]
# 1단계 : 문자열을 입력받는다
# 2단계 : 문자열을 출력한다

import sys
input = sys.stdin.readlines()
# 파이썬에서 input()으로 입력을 받으면 시간이 상당히 오래 걸린다고 한다.
# 반면, readline()은 좀 더 빠르다. 또한, 여러줄을 한 번에 입력받을 수 있으며 공백이나 빈 줄도 문제 없이 처리한다. 두 문제 모두 아래 코드로 풀 수 있다.

# 1번째 방법
for i in input:
    print(i.rstrip())

# 2번째 방법 -> 이때는 sys.stdin.readlines를 쓰면 안됨.
# while True:
#     try:
#         print(input())
#     except EOFError:
#         break

    
# 주의할 점
# 1. 불필요한 것들을 출력하면 틀립니다. 
# 입력받은 내용이 아닌 부분은 절대 출력하려 해서는 안 됩니다. 
# 특히 널 문자는 일부 환경에서 공백과 비슷하게 출력되어 눈치채지 못하는 경우가 많은데, 널 문자도 엄연히 하나의 문자이며 이를 출력했을 경우 무조건 오답이 됩니다.
# -> readlines()로 문자열을 받아오면 개행문자'\n'도 같이 받기 때문에 rstrip()함수를 사용해줘야한다.

# 2. 총 몇 줄이 주어진다 등의 정보는 절대 입력으로 주지 않습니다. 
# -> 즉,  더 이상 읽을 게 없을 때 프로그램을 종료하는 법을 알아야 합니다.
# try-except문을 써야하는 이유는, 만약 줄이 끝나면 EOFError가 뜰 것이기 때문이다. EOFError는 End-Of-File의 약자로, 입력이 끝나 데이터가 없을 때 나는 에러이다.예외 처리 구문 : try~ except~문 존재한다!
# try: 
#     (예외가 발생할 수도 있는 코드)
# except: 
#        (예외가 발생했을 경우 실행되는 코드)
# EOFError : 입력이 끝남(End Of File) 에러
# 데이터가 없어 더 이상 값을 읽을 수 없을 때 발생하는 에러

# 참고할 점
# (Python) input()은 EOFError를 발생시킵니다.
# (Python) sys.stdin.readline()은 빈 문자열을 반환합니다.